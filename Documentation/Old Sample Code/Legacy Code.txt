# def handle_postback(session, link_tag):
#     """Handles the JavaScript PostBack from email details link."""
#     event_target, event_argument = parse_postback_details(link_tag)
#     data = {
#         "__EVENTTARGET": event_target,
#         "__EVENTARGUMENT": event_argument,
#         "__VIEWSTATE": session.viewstate,  # Assumes these are updated elsewhere
#         "__EVENTVALIDATION": session.eventvalidation,
#         "__ASYNCPOST": "true",
#     }
#     response = session.post(INBOX_URL, data=data)
#     if response.status_code == 200:
#         update_security_tokens(LexborHTMLParser(response.text), session)  # Update tokens after each POST
#     return response

# def parse_postback_details(url):
#     """Extracts __EVENTTARGET and __EVENTARGUMENT from a JavaScript postback link."""
#     parts = url.split("'")
#     return parts[1], parts[3]  # Adjust indices based on actual data format

# def update_security_tokens(parser, session):  # Added session as a parameter
#     """Updates __VIEWSTATE and __EVENTVALIDATION from the response HTML to maintain session state."""
#     # Ensure elements exist before accessing their attributes
#     viewstate_elem = parser.css_first("#__VIEWSTATE")
#     if viewstate_elem:
#         session.viewstate = viewstate_elem.attributes.get("value", "")
#     eventvalidation_elem = parser.css_first("#__EVENTVALIDATION")
#     if eventvalidation_elem:
#         session.eventvalidation = eventvalidation_elem.attributes.get("value", "")

# def extract_sender_details(sender_html):
#     """Extracts the sender's name and numeric ID from the provided sender HTML content."""
#     # Example regex pattern that needs to be adapted based on the actual HTML structure
#     match = re.search(r'(.+)\s+\((\d+)\)', sender_html)
#     if match:
#         name = match.group(1).strip()
#         user_id = match.group(2).strip()
#         return name, user_id
#     return None, None

# def process_email_details(parser, db_connection, cursor):
#     """Extracts email content and returns it as a dictionary."""
#     # Debugging to print out HTML elements
#     from_elem = parser.css_first('th.MessageDataGrid.Item a.tooltip')  # Adjusted selector for "From" element
#     if from_elem:
#         from_html = from_elem.inner_html()  # Assuming method to get inner HTML if the library supports it
#     else:
#         logging.error("From element not found")
#         return None

#     # Extract sender details from the HTML
#     from_name, user_id = extract_sender_details(from_html) if from_html else (None, None)

#     if user_id and from_name:
#         date_elem = parser.css_first('#ctl00_mainContentPlaceHolder_inboxGridView tr.MessageDataGrid.Item td:nth-of-type(4)')
#         subject_elem = parser.css_first('#ctl00_mainContentPlaceHolder_inboxGridView tr.MessageDataGrid.Item td:nth-of-type(3)')
#         date_text = date_elem.text().strip() if date_elem else "Unknown"
#         subject_text = subject_elem.text().strip() if subject_elem else "Unknown"
#         message_text = "Details not available"  # Placeholder as actual message might need to be accessed differently

#         logging.info(f"Found user with ID: {user_id} and Name: {from_name}")
#         return {
#             'user_id': user_id,
#             'from_name': from_name,
#             'sent_datetime': date_text,
#             'subject': subject_text,
#             'message': message_text
#         }
#     else:
#         logging.error("Failed to extract email sender information or user details are incomplete.")
#         return None

# def extract_latest_message(email_content):
#     # Extract the most relevant part of the message
#     return email_content.split('-----Original Message-----')[0].strip()

# # def extract_latest_message(email_content):
# #     """Extract the latest message, ignoring any quoted replies."""
# #     pattern = r"-----.*? on \d{1,2}/\d{1,2}/\d{4} \d{1,2}:\d{2} (AM|PM) wrote:\s*>"
# #     parts = re.split(pattern, email_content, maxsplit=1, flags=re.IGNORECASE)
# #     return parts[0].strip() if len(parts) > 1 else email_content.strip()

# # Define regex patterns for validation
# phone_regex = r'\b(?:\d{3}-\d{3}-\d{4}|\d{3}\.\d{3}\.\d{4}|\d{10})\b'
# email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.(com|org|edu|net)\b'
# corrlinks_id_regex = r'\b\d{10}\b'

# def parse_contact_details(email_body, cursor, db_connection):
#     """
#     Parses and validates contact details from the email body.
#     Each line in the email body represents a potential contact.
#     """
#     failed_contacts = []
#     for line in email_body.split('\n'):
#         contact_name, contact_info = line.split(' ', 1)
#         if 'Ph#' in line:
#             phone = re.search(phone_regex, contact_info)
#             if phone:
#                 save_contact_details(contact_name, phone.group(), None, None, cursor)
#             else:
#                 failed_contacts.append(contact_name + ' - Invalid Phone Number')
#         elif 'Email' in line:
#             email = re.search(email_regex, contact_info)
#             if email:
#                 save_contact_details(contact_name, None, email.group(), None, cursor)
#             else:
#                 failed_contacts.append(contact_name + ' - Invalid Email Address')
#         elif 'CL#' in line:
#             corrlinks_id = re.search(corrlinks_id_regex, contact_info)
#             if corrlinks_id:
#                 save_contact_details(contact_name, None, None, corrlinks_id.group(), cursor)
#             else:
#                 failed_contacts.append(contact_name + ' - Invalid CorrLinks ID')

#     # Placeholder for handling failed contacts
#     # TODO: Implement notification logic for failed contacts
#     if failed_contacts:
#         logging.warning("Some contacts failed validation: " + ', '.join(failed_contacts))

# def process_emails(emails, cursor, db_connection):
#     """
#     Processes a list of emails to extract and save contact details.
#     Each email with the subject 'Contact' or 'UserName' is parsed to extract potential contact details.
    
#     Parameters:
#     - emails (list): List of email dictionaries to be processed.
#     - cursor (pyodbc.Cursor): Database cursor for SQL operations.
#     - db_connection (pyodbc.Connection): Database connection to manage transactions.
#     """
#     for email in emails:
#         if email['subject'].lower() == 'contact':
#             try:
#                 parse_contact_details(email['body'], cursor, db_connection)
#                 db_connection.commit()  # Commit changes after each email is processed
#                 logging.info("Email processed and changes committed.")
#             except Exception as e:
#                 db_connection.rollback()
#                 logging.error(f"Error processing email from {email['sender']}: {e}")
#         elif email['subject'].lower() == 'username':
#             try:
#                 user_info = parse_username_info(email['body'])
#                 if user_info:
#                     user_info['UserID'] = email['user_id']
#                     update_user_info(user_info)
#                     delete_invite_email(email['email_id'])
#                     logging.info(f"Updated user info for user ID {email['user_id']}.")
#                 else:
#                     logging.info(f"Invalid user info format in email ID {email['email_id']}.")
#             except Exception as e:
#                 db_connection.rollback()
#                 logging.error(f"Error processing email from {email['sender']}: {e}")

# def process_username_emails(driver, db_connection, cursor):
#     """Processes emails with the subject 'UserName' to update user information."""
#     logging.info("Starting to fetch and process username emails.")
#     try:
#         if TEST_MODE:
#             query = "SELECT EmailID, UserID, Body FROM Emails WHERE Subject = 'UserName'"
#         else:
#             four_hours_ago = datetime.now() - timedelta(hours=4)
#             query = f"""
#             SELECT EmailID, UserID, Body FROM Emails
#             WHERE Subject = 'UserName' AND SentDateTime >= '{four_hours_ago.strftime('%Y-%m-%d %H:%M:%S')}'
#             """
        
#         cursor.execute(query)
#         emails = cursor.fetchall()
#         logging.debug(f"Fetched {len(emails)} emails to process.")

#         for email_id, user_id, body in emails:
#             logging.info(f"Processing email ID {email_id} for user ID {user_id}.")
#             user_info = parse_username_info(body)
#             if user_info:
#                 user_info['UserID'] = user_id
#                 update_user_info(user_info)
#                 delete_invite_email(email_id)
#                 logging.info(f"Updated user info for user ID {user_id}.")
#             else:
#                 logging.info(f"Invalid user info format in email ID {email_id}.")

#         db_connection.commit()
#         logging.info("All user info processed and updated successfully.")
#     except Exception as e:
#         logging.error(f"An error occurred while processing username emails: {str(e)}")
#         if db_connection:
#             db_connection.rollback()
#     finally:
#         if cursor:
#             cursor.close()
#         if db_connection:
#             db_connection.close()
#         logging.info("Database connection and cursor closed successfully.")
        
# def parse_username_info(body: str):
#     pattern = re.compile(
#         r"UserName\s*=\s*(\w+)\s*Age\s*=\s*(\d{2})\s*Sex\s*=\s*(M|F)\s*Private Mode\s*=\s*(Y|N)",
#         re.IGNORECASE
#     )
#     match = pattern.search(body)
#     if match:
#         return {
#             "UserName": match.group(1),
#             "Age": int(match.group(2)),
#             "Sex": match.group(3),
#             "PrivateMode": match.group(4)
#         }
#     return None